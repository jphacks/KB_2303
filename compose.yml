version: "3"

services:
  client:
    image: node:18
    working_dir: /app
    volumes:
      - ./client:/app
    ports:
      - "127.0.0.1:3000:5173"
    command: npm run dev

  sb:
    image: node:18
    working_dir: /app
    volumes:
      - ./client:/app
    ports:
      - "127.0.0.1:6006:6006"
    command: npm run storybook

  nginx:
    image: nginx
    ports:
      - 127.0.0.1:5173:80
    volumes:
      - ./docker/nginx/:/etc/nginx/conf.d/
      - ./client/dist:/var/www
    depends_on:
      - server

  server:
    container_name: server
    build:
      context: .
      dockerfile: dockerfiles/server/Dockerfile
    volumes:
      - ./server/app:/app
      - ./server/db:/db
    ports:
      - "127.0.0.1:8080:80"
    env_file:
      - ./envs/server.env
      - ./envs/db.env
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    image: postgres:15.4
    env_file:
      - ./envs/db.env
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./server/db/init:/docker-entrypoint-initdb.d
    restart: always
    healthcheck:
      test: pg_isready -U postgres
      interval: 2s
      timeout: 5s
      retries: 30

  redis:
    image: redis:7.2.0
    volumes:
      - redis_data:/data
    healthcheck:
      test: redis-cli ping
      interval: 2s
      timeout: 5s
      retries: 30

  rc:
    image: rediscommander/redis-commander
    environment:
      REDIS_HOSTS: REDIS_HOSTS=local:redis:6379
      TZ: JST-9
    ports:
      - "127.0.0.1:8081:8081"
    depends_on:
      - redis

volumes:
  pg_data:
  redis_data: